package models

import play.api.db._
import play.api.libs.json._
import play.api.Play.current
import anorm._
import anorm.SqlParser._
import play.api.Logger
import models._

// event id will be just long generated by postgres
// user id will be generated by PLATFORMs in the form of UUID
case class Attendee(eventId : Long, userId : String)

object Attendee {
  def attending(userId : String, event : Long) = {
    DB.withConnection { implicit connection =>
      SQL(
        "insert into attendees (event_id, user_id) values ({eventid}, {userid});")
        .on('eventid -> event, 'userid -> userId).executeUpdate
    }
  }

  def unattending(userId : String, event : Int) = {
    DB.withConnection { implicit connection =>
      SQL(
        "delete from attendees where event_id ={eventid} and user_id = {userid});")
        .on('eventid -> event, 'userid -> userId).executeUpdate
    }
  }
  
  def eventAttendees(eventId: Long): List[String] = {
    DB.withConnection { implicit connection =>
      SQL("select user_id u from attendees where event_id={eventId}")
      .on('eventId -> eventId)
      .as(get[String]("u") *);
    }
  }
  
  val deserialise = {
    get[Long]("event_id") ~
      get[String]("user_id") map {
        case event_id ~ user_id =>
          Attendee(event_id, user_id)
      }
  }
  
}
